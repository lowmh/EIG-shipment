(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6192],{69368:function(e,t,o){"use strict";o.d(t,{Z:function(){return S}});var n=o(63366),l=o(87462),i=o(67294),s=o(86010),a=o(94780),r=o(41796),p=o(21964),m=o(82066),u=o(85893),c=(0,m.Z)((0,u.jsx)("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),d=(0,m.Z)((0,u.jsx)("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),x=(0,m.Z)((0,u.jsx)("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox"),f=o(98216),h=o(71657),g=o(90948),b=o(1588),C=o(34867);function j(e){return(0,C.Z)("MuiCheckbox",e)}let F=(0,b.Z)("MuiCheckbox",["root","checked","disabled","indeterminate","colorPrimary","colorSecondary"]),O=["checkedIcon","color","icon","indeterminate","indeterminateIcon","inputProps","size","className"],I=e=>{let{classes:t,indeterminate:o,color:n}=e,i={root:["root",o&&"indeterminate",`color${(0,f.Z)(n)}`]},s=(0,a.Z)(i,j,t);return(0,l.Z)({},t,s)},A=(0,g.ZP)(p.Z,{shouldForwardProp:e=>(0,g.FO)(e)||"classes"===e,name:"MuiCheckbox",slot:"Root",overridesResolver:(e,t)=>{let{ownerState:o}=e;return[t.root,o.indeterminate&&t.indeterminate,"default"!==o.color&&t[`color${(0,f.Z)(o.color)}`]]}})(({theme:e,ownerState:t})=>(0,l.Z)({color:(e.vars||e).palette.text.secondary},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${"default"===t.color?e.vars.palette.action.activeChannel:e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,r.Fq)("default"===t.color?e.palette.action.active:e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"default"!==t.color&&{[`&.${F.checked}, &.${F.indeterminate}`]:{color:(e.vars||e).palette[t.color].main},[`&.${F.disabled}`]:{color:(e.vars||e).palette.action.disabled}})),w=(0,u.jsx)(d,{}),y=(0,u.jsx)(c,{}),T=(0,u.jsx)(x,{}),Z=i.forwardRef(function(e,t){var o,a;let r=(0,h.Z)({props:e,name:"MuiCheckbox"}),{checkedIcon:p=w,color:m="primary",icon:c=y,indeterminate:d=!1,indeterminateIcon:x=T,inputProps:f,size:g="medium",className:b}=r,C=(0,n.Z)(r,O),j=d?x:c,F=d?x:p,Z=(0,l.Z)({},r,{color:m,indeterminate:d,size:g}),S=I(Z);return(0,u.jsx)(A,(0,l.Z)({type:"checkbox",inputProps:(0,l.Z)({"data-indeterminate":d},f),icon:i.cloneElement(j,{fontSize:null!=(o=j.props.fontSize)?o:g}),checkedIcon:i.cloneElement(F,{fontSize:null!=(a=F.props.fontSize)?a:g}),ownerState:Z,ref:t,className:(0,s.Z)(S.root,b)},C,{classes:S}))});var S=Z},66485:function(e){function t(){return new DOMException("The request is not allowed","NotAllowedError")}async function o(e){if(!navigator.clipboard)throw t();return navigator.clipboard.writeText(e)}async function n(e){let o=document.createElement("span");o.textContent=e,o.style.whiteSpace="pre",o.style.webkitUserSelect="auto",o.style.userSelect="all",document.body.appendChild(o);let n=window.getSelection(),l=window.document.createRange();n.removeAllRanges(),l.selectNode(o),n.addRange(l);let i=!1;try{i=window.document.execCommand("copy")}finally{n.removeAllRanges(),window.document.body.removeChild(o)}if(!i)throw t()}async function l(e){try{await o(e)}catch(o){try{await n(e)}catch(e){throw e||o||t()}}}/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */e.exports=l},84150:function(e,t,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/forms/form-elements/autocomplete",function(){return o(15748)}])},92223:function(e,t,o){"use strict";o.d(t,{Z:function(){return w}});var n=o(85893),l=o(67294),i=o(87357),s=o(66242),a=o(34386),r=o(67720),p=o(57922),m=o(93946),u=o(78445),c=o(44267),d=o(96420),x=o(98396),f=o(33454),h=o(63730),g=o(15660),b=o.n(g),C=o(86501),j=o(66485),F=o.n(j);let O=e=>e&&("TEXTAREA"===e.nodeName||"INPUT"===e.nodeName);var I=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=(0,l.useRef)(null),o=()=>{e.onSuccess&&e.onSuccess(),e.selectOnCopy&&O(t.current)&&t.current.select()},n=()=>{e.onError&&e.onError();let o=!1!==e.selectOnError;o&&O(t.current)&&t.current.select()},i=e=>{F()(e).then(o).catch(n)},s=(0,l.useCallback)(e=>{"string"==typeof e?i(e):t.current&&i(t.current.value)},[]);return{copy:s,target:t}};let A=e=>{let{id:t,sx:o,code:g,title:j,children:F,className:O}=e,[A,w]=(0,l.useState)(!1),[y,T]=(0,l.useState)(null!==g.tsx?"tsx":"jsx"),Z=I(),S=(0,x.Z)(e=>e.breakpoints.down("md"));(0,l.useEffect)(()=>{b().highlightAll()},[A,y]);let v=()=>null!==g.tsx&&"tsx"===y?g.tsx.props.children.props.children:null!==g.jsx&&"jsx"===y?g.jsx.props.children.props.children:"",L=()=>{Z.copy(v()),C.ZP.success("The source code has been copied to your clipboard.",{duration:2e3})};return(0,n.jsxs)(s.Z,{className:O,sx:{"& .MuiCardHeader-action":{lineHeight:.8},...o},id:t||"card-snippet--".concat(j.toLowerCase().replace(/ /g,"-")),children:[(0,n.jsx)(u.Z,{title:j,...S?{}:{action:(0,n.jsx)(m.Z,{onClick:()=>w(!A),children:(0,n.jsx)(h.Z,{icon:"tabler:code",fontSize:20})})}}),(0,n.jsx)(c.Z,{children:F}),S?null:(0,n.jsxs)(p.Z,{in:A,children:[(0,n.jsx)(r.Z,{sx:{my:"0 !important"}}),(0,n.jsxs)(c.Z,{sx:{position:"relative","& pre":{m:"0 !important",maxHeight:500}},children:[(0,n.jsx)(i.Z,{sx:{mb:4,display:"flex",alignItems:"center",justifyContent:"flex-end"},children:(0,n.jsxs)(f.Z,{exclusive:!0,size:"small",color:"primary",value:y,onChange:(e,t)=>null!==t?T(t):null,children:[null!==g.tsx?(0,n.jsx)(d.Z,{value:"tsx",children:(0,n.jsx)(h.Z,{icon:"tabler:brand-typescript",fontSize:20})}):null,null!==g.jsx?(0,n.jsx)(d.Z,{value:"jsx",children:(0,n.jsx)(h.Z,{icon:"tabler:brand-javascript",fontSize:20})}):null]})}),(0,n.jsx)(a.Z,{title:"Copy the source",placement:"top",children:(0,n.jsx)(m.Z,{onClick:L,sx:{top:"5rem",color:"grey.100",right:"2.5625rem",position:"absolute"},children:(0,n.jsx)(h.Z,{icon:"tabler:copy",fontSize:20})})}),(0,n.jsx)("div",{children:null!==g[y]?g[y]:null})]})]})]})};var w=A},56456:function(e,t,o){"use strict";var n=o(85893),l=o(67294),i=o(90948),s=o(50135);let a=(0,i.ZP)(s.Z)(e=>{let{theme:t}=e;return{alignItems:"flex-start","& .MuiInputLabel-root":{transform:"none",lineHeight:1.154,position:"relative",marginBottom:t.spacing(1),fontSize:t.typography.body2.fontSize,color:"".concat(t.palette.text.primary," !important")},"& .MuiInputBase-root":{borderRadius:8,backgroundColor:"transparent !important",border:"1px solid rgba(".concat(t.palette.customColors.main,", 0.2)"),transition:t.transitions.create(["border-color","box-shadow"],{duration:t.transitions.duration.shorter}),"&:not(.Mui-focused):not(.Mui-disabled):not(.Mui-error):hover":{borderColor:"rgba(".concat(t.palette.customColors.main,", 0.28)")},"&:before, &:after":{display:"none"},"&.MuiInputBase-sizeSmall":{borderRadius:6},"&.Mui-error":{borderColor:t.palette.error.main},"&.Mui-focused":{boxShadow:t.shadows[2],"& .MuiInputBase-input:not(.MuiInputBase-readOnly):not([readonly])::placeholder":{transform:"translateX(4px)"},"&.MuiInputBase-colorPrimary":{borderColor:t.palette.primary.main},"&.MuiInputBase-colorSecondary":{borderColor:t.palette.secondary.main},"&.MuiInputBase-colorInfo":{borderColor:t.palette.info.main},"&.MuiInputBase-colorSuccess":{borderColor:t.palette.success.main},"&.MuiInputBase-colorWarning":{borderColor:t.palette.warning.main},"&.MuiInputBase-colorError":{borderColor:t.palette.error.main},"&.Mui-error":{borderColor:t.palette.error.main}},"&.Mui-disabled":{backgroundColor:"".concat(t.palette.action.selected," !important")},"& .MuiInputAdornment-root":{marginTop:"0 !important"}},"& .MuiInputBase-input":{color:t.palette.text.secondary,"&:not(textarea)":{padding:"15.5px 13px"},"&:not(textarea).MuiInputBase-inputSizeSmall":{padding:"7.5px 13px"},"&:not(.MuiInputBase-readOnly):not([readonly])::placeholder":{transition:t.transitions.create(["opacity","transform"],{duration:t.transitions.duration.shorter})},"&.MuiInputBase-inputAdornedStart:not(.MuiAutocomplete-input)":{paddingLeft:0},"&.MuiInputBase-inputAdornedEnd:not(.MuiAutocomplete-input)":{paddingRight:0}},"& .MuiFormHelperText-root":{lineHeight:1.154,margin:t.spacing(1,0,0),color:t.palette.text.secondary,fontSize:t.typography.body2.fontSize,"&.Mui-error":{color:t.palette.error.main}},"& .MuiSelect-select:focus, & .MuiNativeSelect-select:focus":{backgroundColor:"transparent"},"& .MuiSelect-filled .MuiChip-root":{height:22},"& .MuiAutocomplete-input":{paddingLeft:"6px !important",paddingTop:"7.5px !important",paddingBottom:"7.5px !important","&.MuiInputBase-inputSizeSmall":{paddingLeft:"6px !important",paddingTop:"2.5px !important",paddingBottom:"2.5px !important"}},"& .MuiAutocomplete-inputRoot":{paddingTop:"8px !important",paddingLeft:"8px !important",paddingBottom:"8px !important","&:not(.MuiInputBase-sizeSmall).MuiInputBase-adornedStart":{paddingLeft:"13px !important"},"&.MuiInputBase-sizeSmall":{paddingTop:"5px !important",paddingLeft:"5px !important",paddingBottom:"5px !important","& .MuiAutocomplete-tag":{margin:2,height:22}}},"& .MuiInputBase-multiline":{padding:"15.25px 13px","&.MuiInputBase-sizeSmall":{padding:"7.25px 13px"},"& textarea.MuiInputBase-inputSizeSmall:placeholder-shown":{overflowX:"hidden"}},"& + .react-datepicker__close-icon":{top:11,"&:after":{fontSize:"1.6rem !important"}}}}),r=(0,l.forwardRef)((e,t)=>{let{size:o="small",InputLabelProps:l,...i}=e;return(0,n.jsx)(a,{size:o,inputRef:t,...i,variant:"filled",InputLabelProps:{...l,shrink:!0}})});t.Z=r},15748:function(e,t,o){"use strict";o.r(t),o.d(t,{default:function(){return eI}});var n=o(85893),l=o(86886),i=o(15861),s=o(92223),a=o(87357),r=o(56456),p=o(92949),m=o(60695);let u=()=>(0,n.jsxs)(a.Z,{className:"demo-space-x",sx:{display:"flex",flexWrap:"wrap"},children:[(0,n.jsx)(p.Z,{sx:{width:250},disableCloseOnSelect:!0,options:m.g,id:"autocomplete-disableCloseOnSelect",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"disableCloseOnSelect"})}),(0,n.jsx)(p.Z,{clearOnEscape:!0,sx:{width:250},options:m.g,id:"autocomplete-clearOnEscape",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"clearOnEscape"})}),(0,n.jsx)(p.Z,{disableClearable:!0,sx:{width:250},options:m.g,id:"autocomplete-disableClearable",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"disableClearable"})}),(0,n.jsx)(p.Z,{openOnFocus:!0,sx:{width:250},options:m.g,id:"autocomplete-openOnFocus",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"openOnFocus"})}),(0,n.jsx)(p.Z,{autoHighlight:!0,sx:{width:250},options:m.g,id:"autocomplete-autoHighlight",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"autoHighlight"})}),(0,n.jsx)(p.Z,{autoSelect:!0,sx:{width:250},options:m.g,id:"autocomplete-autoSelect",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"autoSelect"})}),(0,n.jsx)(p.Z,{blurOnSelect:!0,sx:{width:250},options:m.g,id:"autocomplete-blurOnSelect",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"blurOnSelect"})}),(0,n.jsx)(p.Z,{clearOnBlur:!0,sx:{width:250},options:m.g,id:"autocomplete-clearOnBlur",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"clearOnBlur"})}),(0,n.jsx)(p.Z,{sx:{width:250},options:m.g,selectOnFocus:!1,id:"autocomplete-selectOnFocus",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"selectOnFocus={false}"})})]}),c=()=>(0,n.jsxs)(a.Z,{className:"demo-space-x",sx:{display:"flex",flexWrap:"wrap"},children:[(0,n.jsx)(p.Z,{sx:{width:250},options:m.g,id:"autocomplete-custom",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Default"})}),(0,n.jsx)(p.Z,{disabled:!0,sx:{width:250},options:m.g,id:"autocomplete-custom-disabled",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Disabled"})}),(0,n.jsx)(p.Z,{readOnly:!0,sx:{width:250},options:m.g,id:"autocomplete-custom-readOnly",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"readOnly"})})]}),d=()=>(0,n.jsx)(p.Z,{autoHighlight:!0,sx:{width:250},id:"autocomplete-country-select",options:m.h,getOptionLabel:e=>e.label||"",renderOption:(e,t)=>(0,n.jsxs)(a.Z,{component:"li",sx:{"& > img":{mr:4,flexShrink:0}},...e,children:[(0,n.jsx)("img",{alt:"",width:"20",loading:"lazy",src:"https://flagcdn.com/w20/".concat(t.code.toLowerCase(),".png"),srcSet:"https://flagcdn.com/w40/".concat(t.code.toLowerCase(),".png 2x")}),t.label," (",t.code,") +",t.phone]}),renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Choose a country",inputProps:{...e.inputProps,autoComplete:"new-password"}})}),x=()=>{let e=m.g.map(e=>{let t=e.title[0].toUpperCase();return{firstLetter:/[0-9]/.test(t)?"0-9":t,...e}});return(0,n.jsx)(p.Z,{sx:{width:250},id:"autocomplete-grouped",groupBy:e=>e.firstLetter,getOptionLabel:e=>e.title||"",options:e.sort((e,t)=>-t.firstLetter.localeCompare(e.firstLetter)),renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"With categories"})})};var f=o(50135),h=o(5306);let g=()=>(0,n.jsxs)(a.Z,{className:"demo-space-x",sx:{display:"flex",flexWrap:"wrap"},children:[(0,n.jsx)(h.Z,{sx:{width:250},options:m.g,id:"autocomplete-outlined",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(f.Z,{...e,label:"Combo box"})}),(0,n.jsx)(h.Z,{sx:{width:250},options:m.g,id:"autocomplete-filled",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(f.Z,{...e,label:"Combo box",variant:"filled"})}),(0,n.jsx)(h.Z,{sx:{width:250},options:m.g,id:"autocomplete-default",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(f.Z,{...e,label:"Combo box",variant:"standard"})}),(0,n.jsx)(h.Z,{disabled:!0,sx:{width:250},options:m.g,id:"autocomplete-disabled",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(f.Z,{...e,label:"Disabled"})})]}),b=()=>(0,n.jsx)(p.Z,{freeSolo:!0,sx:{width:250},id:"autocomplete-free-solo",options:m.g.map(e=>e.title),renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Free Solo"})});var C=o(67294),j=o(93362);let F=(0,j.D)(),O=()=>{let[e,t]=(0,C.useState)(null);return(0,n.jsx)(p.Z,{freeSolo:!0,clearOnBlur:!0,value:e,selectOnFocus:!0,handleHomeEndKeys:!0,sx:{width:250},options:m.g,id:"autocomplete-free-solo-with-text",renderOption:(e,t)=>(0,n.jsx)("li",{...e,children:t.title}),renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Free solo with text demo"}),getOptionLabel:e=>"string"==typeof e?e||"":e.inputValue?e.inputValue||"":e.title||"",onChange:(e,o)=>{"string"==typeof o?t({title:o}):o&&o.inputValue?t({title:o.inputValue}):t(o)},filterOptions:(e,t)=>{let o=F(e,t),{inputValue:n}=t,l=e.some(e=>n===e.title);return""===n||l||o.push({inputValue:n,title:'Add "'.concat(n,'"')}),o}})},I=()=>(0,n.jsx)(p.Z,{multiple:!0,limitTags:2,options:m.g,id:"autocomplete-limit-tags",getOptionLabel:e=>e.title||"",defaultValue:[m.g[13],m.g[12],m.g[11]],renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"limitTags",placeholder:"Favorites"})});var A=o(69368);let w=()=>(0,n.jsx)(p.Z,{multiple:!0,disableCloseOnSelect:!0,options:m.g,id:"autocomplete-checkboxes",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Checkboxes",placeholder:"Favorites"}),renderOption:(e,t,o)=>{let{selected:l}=o;return(0,n.jsxs)("li",{...e,children:[(0,n.jsx)(A.Z,{checked:l,sx:{mr:2}}),t.title]})}}),y=()=>(0,n.jsxs)("div",{children:[(0,n.jsx)(p.Z,{options:m.g,id:"autocomplete-size-medium",defaultValue:m.g[13],getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,size:"medium",label:"Size medium",placeholder:"Favorites"})}),(0,n.jsx)(p.Z,{multiple:!0,sx:{mt:5},options:m.g,defaultValue:[m.g[13]],id:"autocomplete-size-medium-multi",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,size:"medium",label:"Size medium",placeholder:"Favorites"})})]}),T=["Option 1","Option 2"],Z=()=>(0,n.jsx)(p.Z,{options:T,id:"autocomplete-custom-input",renderInput:e=>(0,n.jsx)("div",{ref:e.InputProps.ref,children:(0,n.jsx)("input",{type:"text",...e.inputProps})}),sx:{display:"inline-block","& input":{width:200,backgroundColor:"background.paper",color:e=>e.palette.getContrastText(e.palette.background.paper)}}});var S=o(87918);let v=[m.g[6]],L=()=>{let[e,t]=(0,C.useState)([...v,m.g[13]]);return(0,n.jsx)(p.Z,{multiple:!0,value:e,options:m.g,id:"autocomplete-fixed-option",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Fixed tag",placeholder:"Favorites"}),onChange:(e,o)=>{t([...v,...o.filter(e=>-1===v.indexOf(e))])},renderTags:(e,t)=>e.map((e,o)=>(0,C.createElement)(S.Z,{label:e.title,...t({index:o}),disabled:-1!==v.indexOf(e),key:o}))})},k=(0,j.D)({matchFrom:"start",stringify:e=>e.title}),V=()=>(0,n.jsx)(p.Z,{options:m.g,filterOptions:k,id:"autocomplete-custom-filter",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Custom filter"})}),N=()=>(0,n.jsxs)(a.Z,{className:"demo-space-x",sx:{display:"flex",flexWrap:"wrap"},children:[(0,n.jsx)(p.Z,{multiple:!0,sx:{width:325},options:m.g,filterSelectedOptions:!0,defaultValue:[m.g[13]],id:"autocomplete-multiple-outlined",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"filterSelectedOptions",placeholder:"Favorites"})}),(0,n.jsx)(p.Z,{freeSolo:!0,multiple:!0,sx:{width:325},id:"autocomplete-multiple-filled",defaultValue:[m.g[13].title],options:m.g.map(e=>e.title),renderInput:e=>(0,n.jsx)(r.Z,{...e,variant:"filled",label:"freeSolo",placeholder:"Favorites"}),renderTags:(e,t)=>e.map((e,o)=>(0,C.createElement)(S.Z,{label:e,...t({index:o}),key:o}))}),(0,n.jsx)(p.Z,{readOnly:!0,multiple:!0,sx:{width:325},options:m.g,id:"autocomplete-multiple-standard",getOptionLabel:e=>e.title||"",defaultValue:[m.g[12],m.g[13]],renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"readOnly",placeholder:"Favorites"})})]}),B=Array.from(Array(48)).map((e,t)=>"".concat(t<20?"0":"").concat(Math.floor(t/2),":").concat(t%2==0?"00":"30")),M=()=>(0,n.jsx)(p.Z,{sx:{width:250},options:B,id:"autocomplete-disabled-options",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Disabled options"}),getOptionDisabled:e=>e===B[0]||e===B[2]});var P=o(98456),z=o(6154);let D=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return new Promise(t=>{setTimeout(t,e)})},E=()=>{let[e,t]=(0,C.useState)(!1),[o,l]=(0,C.useState)([]),i=e&&0===o.length;return(0,C.useEffect)(()=>{let e=!0;if(!i)return;let t=async()=>{let t=await z.Z.get("/forms/autocomplete");await D(1e3);let o=await t.data;e&&l(Object.keys(o).map(e=>o[e]))};return t(),()=>{e=!1}},[i]),(0,C.useEffect)(()=>{e||l([])},[e]),(0,n.jsx)(p.Z,{open:e,options:o,loading:i,onOpen:()=>t(!0),onClose:()=>t(!1),id:"autocomplete-asynchronous-request",getOptionLabel:e=>e.title||"",isOptionEqualToValue:(e,t)=>e.title===t.title,renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Asynchronous",InputProps:{...e.InputProps,endAdornment:(0,n.jsxs)(C.Fragment,{children:[i?(0,n.jsx)(P.Z,{size:20}):null,e.InputProps.endAdornment]})}})})},U=()=>{let[e,t]=(0,C.useState)(null),o=(e,o)=>{t(o)};return(0,n.jsxs)(a.Z,{className:"demo-space-x",sx:{display:"flex",flexWrap:"wrap"},children:[(0,n.jsx)(p.Z,{value:e,sx:{width:250},options:m.g,onChange:o,id:"autocomplete-controlled",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Controlled"})}),(0,n.jsx)(p.Z,{sx:{width:250},options:m.g,id:"autocomplete-uncontrolled",getOptionLabel:e=>e.title||"",renderInput:e=>(0,n.jsx)(r.Z,{...e,label:"Uncontrolled"})})]})},R=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** MUI Import\nimport CircularProgress from '@mui/material/CircularProgress'\n\n// ** Third Party Imports\nimport axios from 'axios'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\nconst sleep = (delay = 0) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay)\n  })\n}\n\nconst AutocompleteAsynchronousRequest = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [options, setOptions] = useState([])\n  const loading = open && options.length === 0\n  useEffect(() => {\n    let active = true\n    if (!loading) {\n      return undefined\n    }\n\n    const fetchData = async () => {\n      const response = await axios.get('/forms/autocomplete')\n      await sleep(1000)\n      const top100Films = await response.data\n      if (active) {\n        setOptions(Object.keys(top100Films).map(key => top100Films[key]))\n      }\n    }\n    fetchData()\n\n    return () => {\n      active = false\n    }\n  }, [loading])\n  useEffect(() => {\n    if (!open) {\n      setOptions([])\n    }\n  }, [open])\n\n  return (\n    <CustomAutocomplete\n      open={open}\n      options={options}\n      loading={loading}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      id='autocomplete-asynchronous-request'\n      getOptionLabel={option => option.title || ''}\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      renderInput={params => (\n        <CustomTextField\n          {...params}\n          label='Asynchronous'\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <Fragment>\n                {loading ? <CircularProgress size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </Fragment>\n            )\n          }}\n        />\n      )}\n    />\n  )\n}\n\nexport default AutocompleteAsynchronousRequest\n"})}),H=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Checkbox from '@mui/material/Checkbox'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteCheckboxes = () => {\n  return (\n    <CustomAutocomplete\n      multiple\n      disableCloseOnSelect\n      options={top100Films}\n      id='autocomplete-checkboxes'\n      getOptionLabel={option => option.title || ''}\n      renderInput={params => <CustomTextField {...params} label='Checkboxes' placeholder='Favorites' />}\n      renderOption={(props, option, { selected }) => (\n        <li {...props}>\n          <Checkbox checked={selected} sx={{ mr: 2 }} />\n          {option.title}\n        </li>\n      )}\n    />\n  )\n}\n\nexport default AutocompleteCheckboxes\n"})}),W=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { countries } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteCountry = () => {\n  return (\n    <CustomAutocomplete\n      autoHighlight\n      sx={{ width: 250 }}\n      id='autocomplete-country-select'\n      options={countries}\n      getOptionLabel={option => option.label || ''}\n      renderOption={(props, option) => (\n        <Box component='li' sx={{ '& > img': { mr: 4, flexShrink: 0 } }} {...props}>\n          <img\n            alt=''\n            width='20'\n            loading='lazy'\n            src={https://flagcdn.com/w20/{option.code.toLowerCase()}.png}\n            srcSet={https://flagcdn.com/w40/{option.code.toLowerCase()}.png 2x}\n          />\n          {option.label} ({option.code}) +{option.phone}\n        </Box>\n      )}\n      renderInput={params => (\n        <CustomTextField\n          {...params}\n          label='Choose a country'\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password'\n          }}\n        />\n      )}\n    />\n  )\n}\n\nexport default AutocompleteCountry\n"})}),_=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteCustom = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-custom'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Default' />}\n      />\n      <CustomAutocomplete\n        disabled\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-custom-disabled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Disabled' />}\n      />\n      <CustomAutocomplete\n        readOnly\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-custom-readOnly'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='readOnly' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteCustom\n"})}),q=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Import\nimport { createFilterOptions } from '@mui/material/Autocomplete'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst filter = createFilterOptions()\n\nconst AutocompleteCreatable = () => {\n  // ** State\n  const [value, setValue] = useState(null)\n\n  return (\n    <CustomAutocomplete\n      freeSolo\n      clearOnBlur\n      value={value}\n      selectOnFocus\n      handleHomeEndKeys\n      sx={{ width: 250 }}\n      options={top100Films}\n      id='autocomplete-free-solo-with-text'\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\n      renderInput={params => <CustomTextField {...params} label='Free solo with text demo' />}\n      getOptionLabel={option => {\n        if (typeof option === 'string') {\n          return option || ''\n        }\n        if (option.inputValue) {\n          return option.inputValue || ''\n        }\n\n        return option.title || ''\n      }}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue\n          })\n        } else if (newValue && newValue.inputValue) {\n          setValue({\n            title: newValue.inputValue\n          })\n        } else {\n          setValue(newValue)\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params)\n        const { inputValue } = params\n        const isExisting = options.some(option => inputValue === option.title)\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: Add \"{inputValue}\"\n          })\n        }\n\n        return filtered\n      }}\n    />\n  )\n}\n\nexport default AutocompleteCreatable\n"})}),$=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Import\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\nconst options = ['Option 1', 'Option 2']\n\nconst AutocompleteCustomInput = () => {\n  return (\n    <CustomAutocomplete\n      options={options}\n      id='autocomplete-custom-input'\n      renderInput={params => (\n        <div ref={params.InputProps.ref}>\n          <input type='text' {...params.inputProps} />\n        </div>\n      )}\n      sx={{\n        display: 'inline-block',\n        '& input': {\n          width: 200,\n          backgroundColor: 'background.paper',\n          color: theme => theme.palette.getContrastText(theme.palette.background.paper)\n        }\n      }}\n    />\n  )\n}\n\nexport default AutocompleteCustomInput\n"})}),G=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteControlledUncontrolled = () => {\n  // ** State\n  const [value, setValue] = useState(null)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        value={value}\n        sx={{ width: 250 }}\n        options={top100Films}\n        onChange={handleChange}\n        id='autocomplete-controlled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Controlled' />}\n      />\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-uncontrolled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Uncontrolled' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteControlledUncontrolled\n"})}),X=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport { createFilterOptions } from '@mui/material/Autocomplete'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: option => option.title\n})\n\nconst AutocompleteCustomFilter = () => {\n  return (\n    <CustomAutocomplete\n      options={top100Films}\n      filterOptions={filterOptions}\n      id='autocomplete-custom-filter'\n      getOptionLabel={option => option.title || ''}\n      renderInput={params => <CustomTextField {...params} label='Custom filter' />}\n    />\n  )\n}\n\nexport default AutocompleteCustomFilter\n"})}),K=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\nconst timeSlots = Array.from(new Array(24 * 2)).map(\n  (_, index) => {index < 20 ? '0' : ''}{Math.floor(index / 2)}:{index % 2 === 0 ? '00' : '30'}\n)\n\nconst AutocompleteDisabledOptions = () => {\n  return (\n    <CustomAutocomplete\n      sx={{ width: 250 }}\n      options={timeSlots}\n      id='autocomplete-disabled-options'\n      renderInput={params => <CustomTextField {...params} label='Disabled options' />}\n      getOptionDisabled={option => option === timeSlots[0] || option === timeSlots[2]}\n    />\n  )\n}\n\nexport default AutocompleteDisabledOptions\n"})}),Y=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Import\nimport Chip from '@mui/material/Chip'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst fixedOptions = [top100Films[6]]\n\nconst AutocompleteFixedOptions = () => {\n  // ** State\n  const [value, setValue] = useState([...fixedOptions, top100Films[13]])\n\n  return (\n    <CustomAutocomplete\n      multiple\n      value={value}\n      options={top100Films}\n      id='autocomplete-fixed-option'\n      getOptionLabel={option => option.title || ''}\n      renderInput={params => <CustomTextField {...params} label='Fixed tag' placeholder='Favorites' />}\n      onChange={(event, newValue) => {\n        setValue([...fixedOptions, ...newValue.filter(option => fixedOptions.indexOf(option) === -1)])\n      }}\n      renderTags={(tagValue, getTagProps) =>\n        tagValue.map((option, index) => (\n          <Chip\n            label={option.title}\n            {...getTagProps({ index })}\n            disabled={fixedOptions.indexOf(option) !== -1}\n            key={index}\n          />\n        ))\n      }\n    />\n  )\n}\n\nexport default AutocompleteFixedOptions\n"})}),J=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteFreeSolo = () => {\n  return (\n    <CustomAutocomplete\n      freeSolo\n      sx={{ width: 250 }}\n      id='autocomplete-free-solo'\n      options={top100Films.map(option => option.title)}\n      renderInput={params => <CustomTextField {...params} label='Free Solo' />}\n    />\n  )\n}\n\nexport default AutocompleteFreeSolo\n"})}),Q=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteLimitTags = () => {\n  return (\n    <CustomAutocomplete\n      multiple\n      limitTags={2}\n      options={top100Films}\n      id='autocomplete-limit-tags'\n      getOptionLabel={option => option.title || ''}\n      defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n      renderInput={params => <CustomTextField {...params} label='limitTags' placeholder='Favorites' />}\n    />\n  )\n}\n\nexport default AutocompleteLimitTags\n"})}),ee=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteMediumSize = () => {\n  return (\n    <div>\n      <CustomAutocomplete\n        options={top100Films}\n        id='autocomplete-size-medium'\n        defaultValue={top100Films[13]}\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => (\n          <CustomTextField {...params} size='medium' label='Size medium' placeholder='Favorites' />\n        )}\n      />\n      <CustomAutocomplete\n        multiple\n        sx={{ mt: 5 }}\n        options={top100Films}\n        defaultValue={[top100Films[13]]}\n        id='autocomplete-size-medium-multi'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => (\n          <CustomTextField {...params} size='medium' label='Size medium' placeholder='Favorites' />\n        )}\n      />\n    </div>\n  )\n}\n\nexport default AutocompleteMediumSize\n"})}),et=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteProps = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        disableCloseOnSelect\n        options={top100Films}\n        id='autocomplete-disableCloseOnSelect'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='disableCloseOnSelect' />}\n      />\n      <CustomAutocomplete\n        clearOnEscape\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-clearOnEscape'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='clearOnEscape' />}\n      />\n      <CustomAutocomplete\n        disableClearable\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-disableClearable'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='disableClearable' />}\n      />\n      <CustomAutocomplete\n        openOnFocus\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-openOnFocus'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='openOnFocus' />}\n      />\n      <CustomAutocomplete\n        autoHighlight\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-autoHighlight'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='autoHighlight' />}\n      />\n      <CustomAutocomplete\n        autoSelect\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-autoSelect'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='autoSelect' />}\n      />\n      <CustomAutocomplete\n        blurOnSelect\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-blurOnSelect'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='blurOnSelect' />}\n      />\n      <CustomAutocomplete\n        clearOnBlur\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-clearOnBlur'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='clearOnBlur' />}\n      />\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        selectOnFocus={false}\n        id='autocomplete-selectOnFocus'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='selectOnFocus={false}' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteProps\n"})}),eo=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteGrouped = () => {\n  const options = top100Films.map(option => {\n    const firstLetter = option.title[0].toUpperCase()\n\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option\n    }\n  })\n\n  return (\n    <CustomAutocomplete\n      sx={{ width: 250 }}\n      id='autocomplete-grouped'\n      groupBy={option => option.firstLetter}\n      getOptionLabel={option => option.title || ''}\n      options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n      renderInput={params => <CustomTextField {...params} label='With categories' />}\n    />\n  )\n}\n\nexport default AutocompleteGrouped\n"})}),en=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport TextField from '@mui/material/TextField'\nimport Autocomplete from '@mui/material/Autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteVariants = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <Autocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-outlined'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Combo box' />}\n      />\n      <Autocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-filled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Combo box' variant='filled' />}\n      />\n      <Autocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-default'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Combo box' variant='standard' />}\n      />\n      <Autocomplete\n        disabled\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-disabled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Disabled' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteVariants\n"})}),el=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport Chip from '@mui/material/Chip'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteMultipleValues = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        multiple\n        sx={{ width: 325 }}\n        options={top100Films}\n        filterSelectedOptions\n        defaultValue={[top100Films[13]]}\n        id='autocomplete-multiple-outlined'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='filterSelectedOptions' placeholder='Favorites' />}\n      />\n      <CustomAutocomplete\n        freeSolo\n        multiple\n        sx={{ width: 325 }}\n        id='autocomplete-multiple-filled'\n        defaultValue={[top100Films[13].title]}\n        options={top100Films.map(option => option.title)}\n        renderInput={params => (\n          <CustomTextField {...params} variant='filled' label='freeSolo' placeholder='Favorites' />\n        )}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => <Chip label={option} {...getTagProps({ index })} key={index} />)\n        }\n      />\n      <CustomAutocomplete\n        readOnly\n        multiple\n        sx={{ width: 325 }}\n        options={top100Films}\n        id='autocomplete-multiple-standard'\n        getOptionLabel={option => option.title || ''}\n        defaultValue={[top100Films[12], top100Films[13]]}\n        renderInput={params => <CustomTextField {...params} label='readOnly' placeholder='Favorites' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteMultipleValues\n"})}),ei=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Checkbox from '@mui/material/Checkbox'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteCheckboxes = () => {\n  return (\n    <CustomAutocomplete\n      multiple\n      disableCloseOnSelect\n      options={top100Films}\n      id='autocomplete-checkboxes'\n      getOptionLabel={option => option.title || ''}\n      renderInput={params => <CustomTextField {...params} label='Checkboxes' placeholder='Favorites' />}\n      renderOption={(props, option, { selected }) => (\n        <li {...props}>\n          <Checkbox checked={selected} sx={{ mr: 2 }} />\n          {option.title}\n        </li>\n      )}\n    />\n  )\n}\n\nexport default AutocompleteCheckboxes\n"})}),es=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { countries } from 'src/@fake-db/autocomplete'\n\ninterface CountryType {\n  code: string\n  label: string\n  phone: string\n}\n\nconst AutocompleteCountry = () => {\n  return (\n    <CustomAutocomplete\n      autoHighlight\n      sx={{ width: 250 }}\n      id='autocomplete-country-select'\n      options={countries as CountryType[]}\n      getOptionLabel={option => option.label || ''}\n      renderOption={(props, option) => (\n        <Box component='li' sx={{ '& > img': { mr: 4, flexShrink: 0 } }} {...props}>\n          <img\n            alt=''\n            width='20'\n            loading='lazy'\n            src={https://flagcdn.com/w20/{option.code.toLowerCase()}.png}\n            srcSet={https://flagcdn.com/w40/{option.code.toLowerCase()}.png 2x}\n          />\n          {option.label} ({option.code}) +{option.phone}\n        </Box>\n      )}\n      renderInput={params => (\n        <CustomTextField\n          {...params}\n          label='Choose a country'\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password'\n          }}\n        />\n      )}\n    />\n  )\n}\n\nexport default AutocompleteCountry\n"})}),ea=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState, SyntheticEvent } from 'react'\n\n// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\ninterface FilmOptionType {\n  year: number\n  title: string\n}\n\nconst AutocompleteControlledUncontrolled = () => {\n  // ** State\n  const [value, setValue] = useState<FilmOptionType | null>(null)\n\n  const handleChange = (event: SyntheticEvent, newValue: FilmOptionType | null) => {\n    setValue(newValue)\n  }\n\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        value={value}\n        sx={{ width: 250 }}\n        options={top100Films}\n        onChange={handleChange}\n        id='autocomplete-controlled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Controlled' />}\n      />\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-uncontrolled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Uncontrolled' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteControlledUncontrolled\n"})}),er=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** MUI Import\nimport CircularProgress from '@mui/material/CircularProgress'\n\n// ** Third Party Imports\nimport axios from 'axios'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\ninterface FilmType {\n  year: number\n  title: string\n}\n\nconst sleep = (delay = 0) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay)\n  })\n}\n\nconst AutocompleteAsynchronousRequest = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [options, setOptions] = useState<FilmType[]>([])\n\n  const loading = open && options.length === 0\n\n  useEffect(() => {\n    let active = true\n\n    if (!loading) {\n      return undefined\n    }\n\n    const fetchData = async () => {\n      const response = await axios.get('/forms/autocomplete')\n      await sleep(1000)\n      const top100Films = await response.data\n\n      if (active) {\n        setOptions(Object.keys(top100Films).map(key => top100Films[key]) as FilmType[])\n      }\n    }\n    fetchData()\n\n    return () => {\n      active = false\n    }\n  }, [loading])\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([])\n    }\n  }, [open])\n\n  return (\n    <CustomAutocomplete\n      open={open}\n      options={options}\n      loading={loading}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      id='autocomplete-asynchronous-request'\n      getOptionLabel={option => option.title || ''}\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      renderInput={params => (\n        <CustomTextField\n          {...params}\n          label='Asynchronous'\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <Fragment>\n                {loading ? <CircularProgress size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </Fragment>\n            )\n          }}\n        />\n      )}\n    />\n  )\n}\n\nexport default AutocompleteAsynchronousRequest\n"})}),ep=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Import\nimport { createFilterOptions } from '@mui/material/Autocomplete'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\ninterface FilmOptionType {\n  year?: number\n  title: string\n  inputValue?: string\n}\n\nconst filter = createFilterOptions<FilmOptionType>()\n\nconst AutocompleteCreatable = () => {\n  // ** State\n  const [value, setValue] = useState<FilmOptionType | null>(null)\n\n  return (\n    <CustomAutocomplete\n      freeSolo\n      clearOnBlur\n      value={value}\n      selectOnFocus\n      handleHomeEndKeys\n      sx={{ width: 250 }}\n      options={top100Films}\n      id='autocomplete-free-solo-with-text'\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\n      renderInput={params => <CustomTextField {...params} label='Free solo with text demo' />}\n      getOptionLabel={option => {\n        if (typeof option === 'string') {\n          return option || ''\n        }\n        if ((option as FilmOptionType).inputValue as string) {\n          return ((option as FilmOptionType).inputValue as string) || ''\n        }\n\n        return (option.title as string) || ''\n      }}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue\n          })\n        } else if (newValue && (newValue as any).inputValue) {\n          setValue({\n            title: (newValue as any).inputValue\n          })\n        } else {\n          setValue(newValue)\n        }\n      }}\n      filterOptions={(options: FilmOptionType[], params: any) => {\n        const filtered = filter(options, params)\n        const { inputValue } = params\n        const isExisting = options.some((option: FilmOptionType) => inputValue === option.title)\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: Add \"{inputValue}\"\n          })\n        }\n\n        return filtered\n      }}\n    />\n  )\n}\n\nexport default AutocompleteCreatable\n"})}),em=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport { createFilterOptions } from '@mui/material/Autocomplete'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\ninterface FilmOptionType {\n  year: number\n  title: string\n}\n\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option: FilmOptionType) => option.title\n})\n\nconst AutocompleteCustomFilter = () => {\n  return (\n    <CustomAutocomplete\n      options={top100Films}\n      filterOptions={filterOptions}\n      id='autocomplete-custom-filter'\n      getOptionLabel={option => option.title || ''}\n      renderInput={params => <CustomTextField {...params} label='Custom filter' />}\n    />\n  )\n}\n\nexport default AutocompleteCustomFilter\n"})}),eu=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteCustom = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-custom'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Default' />}\n      />\n      <CustomAutocomplete\n        disabled\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-custom-disabled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='Disabled' />}\n      />\n      <CustomAutocomplete\n        readOnly\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-custom-readOnly'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='readOnly' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteCustom\n"})}),ec=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteFreeSolo = () => {\n  return (\n    <CustomAutocomplete\n      freeSolo\n      sx={{ width: 250 }}\n      id='autocomplete-free-solo'\n      options={top100Films.map(option => option.title)}\n      renderInput={params => <CustomTextField {...params} label='Free Solo' />}\n    />\n  )\n}\n\nexport default AutocompleteFreeSolo\n"})}),ed=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\nconst timeSlots = Array.from(new Array(24 * 2)).map(\n  (_, index) => {index < 20 ? '0' : ''}{Math.floor(index / 2)}:{index % 2 === 0 ? '00' : '30'}\n)\n\nconst AutocompleteDisabledOptions = () => {\n  return (\n    <CustomAutocomplete\n      sx={{ width: 250 }}\n      options={timeSlots}\n      id='autocomplete-disabled-options'\n      renderInput={params => <CustomTextField {...params} label='Disabled options' />}\n      getOptionDisabled={option => option === timeSlots[0] || option === timeSlots[2]}\n    />\n  )\n}\n\nexport default AutocompleteDisabledOptions\n"})}),ex=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteLimitTags = () => {\n  return (\n    <CustomAutocomplete\n      multiple\n      limitTags={2}\n      options={top100Films}\n      id='autocomplete-limit-tags'\n      getOptionLabel={option => option.title || ''}\n      defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n      renderInput={params => <CustomTextField {...params} label='limitTags' placeholder='Favorites' />}\n    />\n  )\n}\n\nexport default AutocompleteLimitTags\n"})}),ef=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteGrouped = () => {\n  const options = top100Films.map(option => {\n    const firstLetter = option.title[0].toUpperCase()\n\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option\n    }\n  })\n\n  return (\n    <CustomAutocomplete\n      sx={{ width: 250 }}\n      id='autocomplete-grouped'\n      groupBy={option => option.firstLetter}\n      getOptionLabel={option => option.title || ''}\n      options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n      renderInput={params => <CustomTextField {...params} label='With categories' />}\n    />\n  )\n}\n\nexport default AutocompleteGrouped\n"})}),eh=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Import\nimport Chip from '@mui/material/Chip'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\n// ** Type\ninterface DataType {\n  year: number\n  title: string\n}\n\nconst fixedOptions = [top100Films[6]]\n\nconst AutocompleteFixedOptions = () => {\n  // ** State\n  const [value, setValue] = useState<DataType[]>([...fixedOptions, top100Films[13]])\n\n  return (\n    <CustomAutocomplete\n      multiple\n      value={value}\n      options={top100Films}\n      id='autocomplete-fixed-option'\n      getOptionLabel={option => option.title || ''}\n      renderInput={params => <CustomTextField {...params} label='Fixed tag' placeholder='Favorites' />}\n      onChange={(event, newValue) => {\n        setValue([...fixedOptions, ...newValue.filter(option => fixedOptions.indexOf(option) === -1)])\n      }}\n      renderTags={(tagValue, getTagProps) =>\n        tagValue.map((option, index) => (\n          <Chip\n            label={option.title}\n            {...(getTagProps({ index }) as {})}\n            disabled={fixedOptions.indexOf(option) !== -1}\n            key={index}\n          />\n        ))\n      }\n    />\n  )\n}\n\nexport default AutocompleteFixedOptions\n"})}),eg=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Import\nimport Box from '@mui/material/Box'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteProps = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        disableCloseOnSelect\n        options={top100Films}\n        id='autocomplete-disableCloseOnSelect'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='disableCloseOnSelect' />}\n      />\n      <CustomAutocomplete\n        clearOnEscape\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-clearOnEscape'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='clearOnEscape' />}\n      />\n      <CustomAutocomplete\n        disableClearable\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-disableClearable'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='disableClearable' />}\n      />\n      <CustomAutocomplete\n        openOnFocus\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-openOnFocus'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='openOnFocus' />}\n      />\n      <CustomAutocomplete\n        autoHighlight\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-autoHighlight'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='autoHighlight' />}\n      />\n      <CustomAutocomplete\n        autoSelect\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-autoSelect'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='autoSelect' />}\n      />\n      <CustomAutocomplete\n        blurOnSelect\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-blurOnSelect'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='blurOnSelect' />}\n      />\n      <CustomAutocomplete\n        clearOnBlur\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-clearOnBlur'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='clearOnBlur' />}\n      />\n      <CustomAutocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        selectOnFocus={false}\n        id='autocomplete-selectOnFocus'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='selectOnFocus={false}' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteProps\n"})}),eb=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Import\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\nconst options = ['Option 1', 'Option 2']\n\nconst AutocompleteCustomInput = () => {\n  return (\n    <CustomAutocomplete\n      options={options}\n      id='autocomplete-custom-input'\n      renderInput={params => (\n        <div ref={params.InputProps.ref}>\n          <input type='text' {...params.inputProps} />\n        </div>\n      )}\n      sx={{\n        display: 'inline-block',\n        '& input': {\n          width: 200,\n          backgroundColor: 'background.paper',\n          color: theme => theme.palette.getContrastText(theme.palette.background.paper)\n        }\n      }}\n    />\n  )\n}\n\nexport default AutocompleteCustomInput\n"})}),eC=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport Chip from '@mui/material/Chip'\n\n// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteMultipleValues = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <CustomAutocomplete\n        multiple\n        sx={{ width: 325 }}\n        options={top100Films}\n        filterSelectedOptions\n        defaultValue={[top100Films[13]]}\n        id='autocomplete-multiple-outlined'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <CustomTextField {...params} label='filterSelectedOptions' placeholder='Favorites' />}\n      />\n      <CustomAutocomplete\n        freeSolo\n        multiple\n        sx={{ width: 325 }}\n        id='autocomplete-multiple-filled'\n        defaultValue={[top100Films[13].title]}\n        options={top100Films.map(option => option.title)}\n        renderInput={params => (\n          <CustomTextField {...params} variant='filled' label='freeSolo' placeholder='Favorites' />\n        )}\n        renderTags={(value: string[], getTagProps) =>\n          value.map((option: string, index: number) => (\n            <Chip label={option} {...(getTagProps({ index }) as {})} key={index} />\n          ))\n        }\n      />\n      <CustomAutocomplete\n        readOnly\n        multiple\n        sx={{ width: 325 }}\n        options={top100Films}\n        id='autocomplete-multiple-standard'\n        getOptionLabel={option => option.title || ''}\n        defaultValue={[top100Films[12], top100Films[13]]}\n        renderInput={params => <CustomTextField {...params} label='readOnly' placeholder='Favorites' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteMultipleValues\n"})}),ej=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport TextField from '@mui/material/TextField'\nimport Autocomplete from '@mui/material/Autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteVariants = () => {\n  return (\n    <Box className='demo-space-x' sx={{ display: 'flex', flexWrap: 'wrap' }}>\n      <Autocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-outlined'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Combo box' />}\n      />\n      <Autocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-filled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Combo box' variant='filled' />}\n      />\n      <Autocomplete\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-default'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Combo box' variant='standard' />}\n      />\n      <Autocomplete\n        disabled\n        sx={{ width: 250 }}\n        options={top100Films}\n        id='autocomplete-disabled'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => <TextField {...params} label='Disabled' />}\n      />\n    </Box>\n  )\n}\n\nexport default AutocompleteVariants\n"})}),eF=(0,n.jsx)("pre",{className:"language-jsx",children:(0,n.jsx)("code",{className:"language-jsx",children:"// ** Custom Component Imports\nimport CustomTextField from 'src/@core/components/mui/text-field'\nimport CustomAutocomplete from 'src/@core/components/mui/autocomplete'\n\n// ** Data\nimport { top100Films } from 'src/@fake-db/autocomplete'\n\nconst AutocompleteMediumSize = () => {\n  return (\n    <div>\n      <CustomAutocomplete\n        options={top100Films}\n        id='autocomplete-size-medium'\n        defaultValue={top100Films[13]}\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => (\n          <CustomTextField {...params} size='medium' label='Size medium' placeholder='Favorites' />\n        )}\n      />\n      <CustomAutocomplete\n        multiple\n        sx={{ mt: 5 }}\n        options={top100Films}\n        defaultValue={[top100Films[13]]}\n        id='autocomplete-size-medium-multi'\n        getOptionLabel={option => option.title || ''}\n        renderInput={params => (\n          <CustomTextField {...params} size='medium' label='Size medium' placeholder='Favorites' />\n        )}\n      />\n    </div>\n  )\n}\n\nexport default AutocompleteMediumSize\n"})}),eO=()=>(0,n.jsxs)(l.ZP,{container:!0,spacing:6,className:"match-height",children:[(0,n.jsx)(l.ZP,{item:!0,xs:12,children:(0,n.jsxs)(s.Z,{title:"Custom",code:{tsx:eu,jsx:_},children:[(0,n.jsxs)(i.Z,{children:["Use the ",(0,n.jsx)("code",{children:"CustomTextField"})," component in the ",(0,n.jsx)("code",{children:"renderInput"})," prop with the"," ",(0,n.jsx)("code",{children:"CustomAutocomplete"})," component to render a custom autocomplete. Use ",(0,n.jsx)("code",{children:"disabled"})," and"," ",(0,n.jsx)("code",{children:"readOnly"})," props with the ",(0,n.jsx)("code",{children:"CustomAutocomplete"})," component for disabled and read-only autocomplete respectively."]}),(0,n.jsx)(c,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,children:(0,n.jsxs)(s.Z,{title:"Variants",code:{tsx:ej,jsx:en},children:[(0,n.jsxs)(i.Z,{children:["Use ",(0,n.jsxs)("code",{children:["variant=","{'filled' | 'standard'}"]})," prop with ",(0,n.jsx)("code",{children:"TextField"})," component in"," ",(0,n.jsx)("code",{children:"renderInput"})," prop with ",(0,n.jsx)("code",{children:"Autocomplete"})," component for different variants of input. Use"," ",(0,n.jsx)("code",{children:"disabled"})," prop with ",(0,n.jsx)("code",{children:"Autocomplete"})," component for disabled autocomplete."]}),(0,n.jsx)(g,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,children:(0,n.jsxs)(s.Z,{title:"Controlled and Uncontrolled",code:{tsx:ea,jsx:G},children:[(0,n.jsxs)(i.Z,{children:["Use ",(0,n.jsx)("code",{children:"value"})," prop with ",(0,n.jsx)("code",{children:"CustomAutocomplete"})," component for controlled autocomplete input."]}),(0,n.jsx)(U,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,children:(0,n.jsxs)(s.Z,{title:"Autocomplete Props",code:{tsx:eg,jsx:et},children:[(0,n.jsxs)(i.Z,{children:["Each of the following examples demonstrate one feature of ",(0,n.jsx)("code",{children:"CustomAutocomplete"})," component."]}),(0,n.jsx)(u,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Country Select",code:{tsx:es,jsx:W},children:[(0,n.jsx)(i.Z,{sx:{mb:4},children:"Choose one of the countries."}),(0,n.jsx)(d,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Free Solo",code:{tsx:ec,jsx:J},children:[(0,n.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,n.jsx)("code",{children:"freeSolo"})," prop so the textbox can contain any arbitrary value."]}),(0,n.jsx)(b,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Creatable",code:{tsx:ep,jsx:q},children:[(0,n.jsx)(i.Z,{sx:{mb:4},children:"You can create an option other than from the list."}),(0,n.jsx)(O,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Grouped",code:{tsx:ef,jsx:eo},children:[(0,n.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,n.jsx)("code",{children:"groupBy"})," prop to group the list according to your needs."]}),(0,n.jsx)(x,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Disabled Options",code:{tsx:ed,jsx:K},children:[(0,n.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,n.jsx)("code",{children:"getOptionDisabled"})," prop to disable some options from the list."]}),(0,n.jsx)(M,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Asynchronous Request",code:{tsx:er,jsx:R},children:[(0,n.jsx)(i.Z,{sx:{mb:4},children:"You can fetch the data with the help of APIs for the options."}),(0,n.jsx)(E,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,children:(0,n.jsxs)(s.Z,{title:"Multiple Values",code:{tsx:eC,jsx:el},children:[(0,n.jsxs)(i.Z,{children:["Use ",(0,n.jsx)("code",{children:"multiple"})," prop to select multiple options from the list."]}),(0,n.jsx)(N,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Fixed Options",code:{tsx:eh,jsx:Y},children:[(0,n.jsx)(i.Z,{sx:{mb:4},children:"You can fix an option in the input and add any other option as well."}),(0,n.jsx)(L,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Checkboxes",code:{tsx:ei,jsx:H},children:[(0,n.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,n.jsx)("code",{children:"Checkbox"})," component in ",(0,n.jsx)("code",{children:"renderOption"})," prop to render checkbox in options."]}),(0,n.jsx)(w,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Limit Tags",code:{tsx:ex,jsx:Q},children:[(0,n.jsxs)(i.Z,{sx:{mb:6},children:["Use ",(0,n.jsx)("code",{children:"limitTags"})," prop to limit tags in the input."]}),(0,n.jsx)(I,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Medium Size",code:{tsx:eF,jsx:ee},children:[(0,n.jsxs)(i.Z,{sx:{mb:5},children:["Use ",(0,n.jsx)("code",{children:"size='medium'"})," prop with the ",(0,n.jsx)("code",{children:"CustomTextField"})," component for medium sized input."]}),(0,n.jsx)(y,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Custom Input",code:{tsx:eb,jsx:$},children:[(0,n.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,n.jsx)("code",{children:"renderInput"})," prop to customize the rendered input."]}),(0,n.jsx)(Z,{})]})}),(0,n.jsx)(l.ZP,{item:!0,xs:12,md:6,children:(0,n.jsxs)(s.Z,{title:"Custom Filter",code:{tsx:em,jsx:X},children:[(0,n.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,n.jsx)("code",{children:"filterOptions"})," prop to filter the search according to your needs."]}),(0,n.jsx)(V,{})]})})]});var eI=eO}},function(e){e.O(0,[5511,9774,2888,179],function(){return e(e.s=84150)}),_N_E=e.O()}]);